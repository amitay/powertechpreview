From 9150393d37b3d8da49e0cbf8c4e9a739515e69fe Mon Sep 17 00:00:00 2001
From: "Paul E. Murphy" <murphyp@linux.vnet.ibm.com>
Date: Fri, 26 Feb 2016 11:42:35 -0500
Subject: [PATCH] Backport Made the mem_cache_block lockfree

(Paul Murphy I've stripped out the patch which makes this
only work with C++11. boost.atomic should suffice.)

This *significantly* improves parallel performance of regex.
Currently if I have a large number of threads all using regexes; even if
they are using idependent regex objects, performance is still extremely poor
due to the lock inside of the mem_block_cache.

Updated with platform checks

restored missing header

Work done by Yucheng Low <ylow@graphlab.com>
---
---
 boost/regex/v4/mem_block_cache.hpp | 59 ++++++++++++++++++++++++++++++++++++++
 libs/regex/src/regex.cpp           |  4 ++-
 2 files changed, 62 insertions(+), 1 deletion(-)

diff --git a/boost/regex/v4/mem_block_cache.hpp b/boost/regex/v4/mem_block_cache.hpp
index 222142d..d0d088b 100644
--- a/boost/regex/v4/mem_block_cache.hpp
+++ b/boost/regex/v4/mem_block_cache.hpp
@@ -19,6 +19,7 @@
 #define BOOST_REGEX_V4_MEM_BLOCK_CACHE_HPP
 
 #include <new>
+#include <boost/atomic/atomic.hpp>
 #ifdef BOOST_HAS_THREADS
 #include <boost/regex/pending/static_mutex.hpp>
 #endif
@@ -27,9 +28,66 @@
 #  include BOOST_ABI_PREFIX
 #endif
 
+#ifdef BOOST_NO_CXX11_HDR_ATOMIC
+  #if BOOST_ATOMIC_POINTER_LOCK_FREE == 2
+    #define BOOST_REGEX_MEM_BLOCK_CACHE_LOCK_FREE
+    #define BOOST_REGEX_ATOMIC_POINTER boost::atomic
+  #endif
+#else // BOOST_NOCXX11_HDR_ATOMIC not defined
+  #include <atomic>
+  #if ATOMIC_POINTER_LOCK_FREE == 2
+    #define BOOST_REGEX_MEM_BLOCK_CACHE_LOCK_FREE
+    #define BOOST_REGEX_ATOMIC_POINTER std::atomic
+  #endif
+#endif
+
 namespace boost{
 namespace re_detail{
 
+#ifdef BOOST_REGEX_MEM_BLOCK_CACHE_LOCK_FREE /* lock free implementation */
+struct mem_block_cache
+{
+   BOOST_REGEX_ATOMIC_POINTER<void*> cache[BOOST_REGEX_MAX_CACHE_BLOCKS];
+
+   mem_block_cache() {
+     for (size_t i = 0;i < BOOST_REGEX_MAX_CACHE_BLOCKS; ++i) {
+       cache[i].store(NULL);
+     }
+
+   }
+   ~mem_block_cache()
+   {
+     for (size_t i = 0;i < BOOST_REGEX_MAX_CACHE_BLOCKS; ++i) {
+       if (cache[i].load()) ::operator delete(cache[i].load());
+     }
+   }
+   void* get()
+   {
+     for (size_t i = 0;i < BOOST_REGEX_MAX_CACHE_BLOCKS; ++i) {
+       void* p = cache[i].load();
+       if (p != NULL) {
+         if (cache[i].compare_exchange_strong(p, NULL)) return p;
+       }
+     }
+     return ::operator new(BOOST_REGEX_BLOCKSIZE);
+   }
+   void put(void* ptr)
+   {
+     for (size_t i = 0;i < BOOST_REGEX_MAX_CACHE_BLOCKS; ++i) {
+       void* p = cache[i].load();
+       if (p == NULL) {
+         if (cache[i].compare_exchange_strong(p, ptr)) return;
+       }
+     }
+     ::operator delete(ptr);
+   }
+};
+
+#undef BOOST_REGEX_ATOMIC_POINTER
+
+#else /* lock-based implementation */
+
+
 struct mem_block_node
 {
    mem_block_node* next;
@@ -85,6 +143,7 @@ struct mem_block_cache
       }
    }
 };
+#endif
 
 extern mem_block_cache block_cache;
 
diff --git a/libs/regex/src/regex.cpp b/libs/regex/src/regex.cpp
index ea20a06..a15ecae 100644
--- a/libs/regex/src/regex.cpp
+++ b/libs/regex/src/regex.cpp
@@ -191,7 +191,9 @@ BOOST_REGEX_DECL void BOOST_REGEX_CALL put_mem_block(void* p)
 
 #else
 
-#ifdef BOOST_HAS_THREADS
+#if defined(BOOST_REGEX_MEM_BLOCK_CACHE_LOCK_FREE)
+mem_block_cache block_cache;
+#elif defined(BOOST_HAS_THREADS)
 mem_block_cache block_cache = { 0, 0, BOOST_STATIC_MUTEX_INIT, };
 #else
 mem_block_cache block_cache = { 0, 0, };
-- 
1.8.3.1

